/*
 * This task is a bit harder than the previous two.
 * Feel free to change the E3SLinqProvider and any other classes if needed.
 * Possibly, after these changes you will need to rewrite existing tests to make them work again =).
 *
 * The task: implement support of && operator for IQueryable. The final request generated by FTSRequestGenerator, should
 * imply the following rules: https://kb.epam.com/display/EPME3SDEV/Telescope+public+REST+for+data#TelescopepublicRESTfordata-FTSRequestSyntax
 */

using System;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Net.Http;
using Expressions.Task3.E3SQueryProvider.Helpers;
using Expressions.Task3.E3SQueryProvider.Models.Entities;
using Expressions.Task3.E3SQueryProvider.QueryProvider;
using Expressions.Task3.E3SQueryProvider.Services;
using Microsoft.Extensions.Configuration;
using Moq;
using Xunit;
using Xunit.Abstractions;

namespace Expressions.Task3.E3SQueryProvider.Test
{
    public class E3SAndOperatorSupportTests
    {
        private readonly ITestOutputHelper _testOutputHelper;

        private static IConfigurationRoot config = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json")
            .Build();

        private static string _baseUrl = config["api:apiBaseUrl"];
        private static string _path = "./TestResults.json";

        #region SubTask 3: AND operator support

        [Fact]
        public void TestAndQueryable()
        {
            var translator = new ExpressionToFtsRequestTranslator();
            var generator = new FtsRequestGenerator(_baseUrl);
            Expression<Func<IQueryable<EmployeeEntity>, IQueryable<EmployeeEntity>>> expression
                = query => query.Where(e => e.Workstation == "EPRUIZHW006" && e.Manager.StartsWith("John"));

            var resultQuery = translator.Translate(expression);
            var json = generator.GenerateRequestUrl(resultQuery, 0, 10);
            var expectedResult = "{\"statements\":[{\"query\":\"Workstation:(EPRUIZHW006)\"},{\"query\":\"Manager:(John*)\"}],\"filters\":null,\"sorting\":null,\"start\":0,\"limit\":10}";

            Assert.Equal(expectedResult, json);
        }


        [Fact]
        public void TestMultipleAndQueryable()
        {
            var translator = new ExpressionToFtsRequestTranslator();
            var generator = new FtsRequestGenerator(_baseUrl);
            Expression<Func<IQueryable<EmployeeEntity>, IQueryable<EmployeeEntity>>> expression
                = query => query.Where(e => e.Workstation == "EPRUIZHW006" && e.Manager.StartsWith("John") && e.NativeName.EndsWith("lui") && e.Office.Contains("Tiraznay"));

            var resultQuery = translator.Translate(expression);
            var json = generator.GenerateRequestUrl(resultQuery, 0, 10);
            var expectedResult = "{\"statements\":[{\"query\":\"Workstation:(EPRUIZHW006)\"},{\"query\":\"Manager:(John*)\"},{\"query\":\"NativeName:(*lui)\"},{\"query\":\"Office:(*Tiraznay*)\"}],\"filters\":null,\"sorting\":null,\"start\":0,\"limit\":10}";

            Assert.Equal(expectedResult, json);
        }


        #endregion
    }
}
